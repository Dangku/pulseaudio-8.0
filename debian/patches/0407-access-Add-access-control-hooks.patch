From d25ec7bc401be4df1df53158ccacd5026366f38d Mon Sep 17 00:00:00 2001
From: Alfonso Sanchez-Beato <alfonso.sanchez-beato@canonical.com>
Date: Fri, 7 Aug 2015 12:19:50 +0200
Subject: [PATCH 1/4] access: Add access control hooks

Add hooks to core to check if certain operations are allowed.
---
 src/Makefile.am        |   1 +
 src/pulsecore/access.h | 102 +++++++++++++++++++++++++++++++++++++++++++++++++
 src/pulsecore/core.c   |   5 +++
 src/pulsecore/core.h   |   3 ++
 4 files changed, 111 insertions(+)
 create mode 100644 src/pulsecore/access.h

Index: pulseaudio/src/Makefile.am
===================================================================
--- pulseaudio.orig/src/Makefile.am
+++ pulseaudio/src/Makefile.am
@@ -641,6 +641,7 @@ commonlib_LTLIBRARIES = \
 # to the existing libpulse being linked to libpulsecommon). Duplicating the
 # code allows us to prevent this circular linking.
 libpulsecommon_@PA_MAJORMINOR@_la_SOURCES = \
+		pulsecore/access.h \
 		pulse/client-conf.c pulse/client-conf.h \
 		pulse/fork-detect.c pulse/fork-detect.h \
 		pulse/format.c pulse/format.h \
Index: pulseaudio/src/pulsecore/access.h
===================================================================
--- /dev/null
+++ pulseaudio/src/pulsecore/access.h
@@ -0,0 +1,102 @@
+#ifndef fooaccesshfoo
+#define fooaccesshfoo
+
+/***
+  This file is part of PulseAudio.
+
+  Copyright 2004-2006 Lennart Poettering
+            2015 Wim Taymans <wtaymans@redhat.com>
+
+  PulseAudio is free software; you can redistribute it and/or modify
+  it under the terms of the GNU Lesser General Public License as
+  published by the Free Software Foundation; either version 2.1 of the
+  License, or (at your option) any later version.
+
+  PulseAudio is distributed in the hope that it will be useful, but
+  WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+  Lesser General Public License for more details.
+
+  You should have received a copy of the GNU Lesser General Public
+  License along with PulseAudio; if not, see <http://www.gnu.org/licenses/>.
+***/
+
+#include <sys/types.h>
+
+#include <pulsecore/client.h>
+
+typedef enum pa_access_hook {
+    /* context */
+    PA_ACCESS_HOOK_EXIT_DAEMON,
+    PA_ACCESS_HOOK_SET_DEFAULT_SINK,
+    PA_ACCESS_HOOK_SET_DEFAULT_SOURCE,
+
+    /* introspection */
+    PA_ACCESS_HOOK_GET_SINK_INFO,
+    PA_ACCESS_HOOK_SET_SINK_VOLUME,
+    PA_ACCESS_HOOK_SET_SINK_MUTE,
+    PA_ACCESS_HOOK_SUSPEND_SINK,
+    PA_ACCESS_HOOK_SET_SINK_PORT,
+
+    PA_ACCESS_HOOK_GET_SOURCE_INFO,
+    PA_ACCESS_HOOK_SET_SOURCE_VOLUME,
+    PA_ACCESS_HOOK_SET_SOURCE_MUTE,
+    PA_ACCESS_HOOK_SUSPEND_SOURCE,
+    PA_ACCESS_HOOK_SET_SOURCE_PORT,
+
+    PA_ACCESS_HOOK_GET_SERVER_INFO,
+
+    PA_ACCESS_HOOK_GET_MODULE_INFO,
+    PA_ACCESS_HOOK_LOAD_MODULE,
+    PA_ACCESS_HOOK_UNLOAD_MODULE,
+
+    PA_ACCESS_HOOK_GET_CLIENT_INFO,
+    PA_ACCESS_HOOK_KILL_CLIENT,
+
+    PA_ACCESS_HOOK_GET_CARD_INFO,
+    PA_ACCESS_HOOK_SET_CARD_PROFILE,
+    PA_ACCESS_HOOK_SET_PORT_LATENCY_OFFSET,
+
+    PA_ACCESS_HOOK_GET_SINK_INPUT_INFO,
+    PA_ACCESS_HOOK_MOVE_SINK_INPUT,
+    PA_ACCESS_HOOK_SET_SINK_INPUT_VOLUME,
+    PA_ACCESS_HOOK_SET_SINK_INPUT_MUTE,
+    PA_ACCESS_HOOK_KILL_SINK_INPUT,
+
+    PA_ACCESS_HOOK_GET_SOURCE_OUTPUT_INFO,
+    PA_ACCESS_HOOK_MOVE_SOURCE_OUTPUT,
+    PA_ACCESS_HOOK_SET_SOURCE_OUTPUT_VOLUME,
+    PA_ACCESS_HOOK_SET_SOURCE_OUTPUT_MUTE,
+    PA_ACCESS_HOOK_KILL_SOURCE_OUTPUT,
+
+    PA_ACCESS_HOOK_STAT,
+
+    PA_ACCESS_HOOK_GET_SAMPLE_INFO,
+    /* sample cache */
+    PA_ACCESS_HOOK_CONNECT_UPLOAD,
+    PA_ACCESS_HOOK_REMOVE_SAMPLE,
+    PA_ACCESS_HOOK_PLAY_SAMPLE,
+    /* stream */
+    PA_ACCESS_HOOK_CONNECT_PLAYBACK,
+    PA_ACCESS_HOOK_CONNECT_RECORD,
+    /* extension */
+    PA_ACCESS_HOOK_EXTENSION,
+
+    PA_ACCESS_HOOK_FILTER_SUBSCRIBE_EVENT,
+
+    PA_ACCESS_HOOK_MAX
+} pa_access_hook_t;
+
+typedef struct pa_access_data pa_access_data;
+
+struct pa_access_data {
+    pa_access_hook_t hook;
+    uint32_t client_index;
+    uint32_t object_index;
+    pa_subscription_event_type_t event;
+    const char *name;
+
+    void (*async_finish_cb) (pa_access_data *data, bool res);
+};
+
+#endif
Index: pulseaudio/src/pulsecore/core.c
===================================================================
--- pulseaudio.orig/src/pulsecore/core.c
+++ pulseaudio/src/pulsecore/core.c
@@ -151,6 +151,9 @@ pa_core* pa_core_new(pa_mainloop_api *m,
     for (j = 0; j < PA_CORE_HOOK_MAX; j++)
         pa_hook_init(&c->hooks[j], c);
 
+    for (j = 0; j < PA_ACCESS_HOOK_MAX; j++)
+        pa_hook_init(&c->access[j], c);
+
     pa_random(&c->cookie, sizeof(c->cookie));
 
 #ifdef SIGPIPE
@@ -222,6 +225,8 @@ static void core_free(pa_object *o) {
 
     for (j = 0; j < PA_CORE_HOOK_MAX; j++)
         pa_hook_done(&c->hooks[j]);
+    for (j = 0; j < PA_ACCESS_HOOK_MAX; j++)
+        pa_hook_done(&c->access[j]);
 
     pa_xfree(c);
 }
Index: pulseaudio/src/pulsecore/core.h
===================================================================
--- pulseaudio.orig/src/pulsecore/core.h
+++ pulseaudio/src/pulsecore/core.h
@@ -49,6 +49,7 @@ typedef enum pa_suspend_cause {
 #include <pulsecore/source.h>
 #include <pulsecore/core-subscribe.h>
 #include <pulsecore/msgobject.h>
+#include <pulsecore/access.h>
 
 typedef enum pa_server_type {
     PA_SERVER_TYPE_UNSET,
@@ -206,6 +207,8 @@ struct pa_core {
 
     /* hooks */
     pa_hook hooks[PA_CORE_HOOK_MAX];
+    /* access hooks */
+    pa_hook access[PA_ACCESS_HOOK_MAX];
 };
 
 PA_DECLARE_PUBLIC_CLASS(pa_core);
