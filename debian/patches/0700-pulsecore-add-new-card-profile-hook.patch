Index: pulseaudio.git/src/pulsecore/core.h
===================================================================
--- pulseaudio.git.orig/src/pulsecore/core.h
+++ pulseaudio.git/src/pulsecore/core.h
@@ -119,6 +119,7 @@ typedef enum pa_core_hook {
     PA_CORE_HOOK_CLIENT_PROPLIST_CHANGED,
     PA_CORE_HOOK_CLIENT_SEND_EVENT,
     PA_CORE_HOOK_CARD_NEW,
+    PA_CORE_HOOK_CARD_CHOOSE_INITIAL_PROFILE,
     PA_CORE_HOOK_CARD_PUT,
     PA_CORE_HOOK_CARD_UNLINK,
     PA_CORE_HOOK_CARD_PREFERRED_PORT_CHANGED,
Index: pulseaudio.git/src/pulsecore/card.h
===================================================================
--- pulseaudio.git.orig/src/pulsecore/card.h
+++ pulseaudio.git/src/pulsecore/card.h
@@ -84,6 +84,8 @@ struct pa_card {
 
     bool save_profile:1;
 
+    bool linked;
+
     void *userdata;
 
     int (*set_profile)(pa_card *c, pa_card_profile *profile);
@@ -126,6 +128,13 @@ void pa_card_new_data_set_preferred_port
 void pa_card_new_data_done(pa_card_new_data *data);
 
 pa_card *pa_card_new(pa_core *c, pa_card_new_data *data);
+
+/* Select the initial card profile acording to the configured policies. This
+ * must be called between pa_card_new() and pa_card_put(), after the port and
+ * profile availabilities have been initialized. */
+void pa_card_choose_initial_profile(pa_card *card);
+
+void pa_card_put(pa_card *c);
 void pa_card_free(pa_card *c);
 
 void pa_card_add_profile(pa_card *c, pa_card_profile *profile);
Index: pulseaudio.git/src/modules/bluetooth/module-bluez5-device.c
===================================================================
--- pulseaudio.git.orig/src/modules/bluetooth/module-bluez5-device.c
+++ pulseaudio.git/src/modules/bluetooth/module-bluez5-device.c
@@ -2194,6 +2194,8 @@ static int add_card(struct userdata *u)
 
     u->card->userdata = u;
     u->card->set_profile = set_profile_cb;
+    pa_card_choose_initial_profile(u->card);
+    pa_card_put(u->card);
 
     p = PA_CARD_PROFILE_DATA(u->card->active_profile);
 
Index: pulseaudio.git/src/modules/macosx/module-coreaudio-device.c
===================================================================
--- pulseaudio.git.orig/src/modules/macosx/module-coreaudio-device.c
+++ pulseaudio.git/src/modules/macosx/module-coreaudio-device.c
@@ -807,6 +807,8 @@ int pa__init(pa_module *m) {
     pa_card_new_data_done(&card_new_data);
     u->card->userdata = u;
     u->card->set_profile = card_set_profile;
+    pa_card_choose_initial_profile(u->card);
+    pa_card_put(u->card);
 
     u->rtpoll = pa_rtpoll_new();
     pa_thread_mq_init(&u->thread_mq, m->core->mainloop, u->rtpoll);
Index: pulseaudio.git/src/pulsecore/card.c
===================================================================
--- pulseaudio.git.orig/src/pulsecore/card.c
+++ pulseaudio.git/src/pulsecore/card.c
@@ -181,38 +181,59 @@ pa_card *pa_card_new(pa_core *core, pa_c
     c->preferred_input_port = data->preferred_input_port;
     c->preferred_output_port = data->preferred_output_port;
 
-    if (data->active_profile)
-        if ((c->active_profile = pa_hashmap_get(c->profiles, data->active_profile)))
-            c->save_profile = data->save_profile;
-
-    if (!c->active_profile) {
-        PA_HASHMAP_FOREACH(profile, c->profiles, state) {
-            if (profile->available == PA_AVAILABLE_NO)
-                continue;
+    pa_device_init_description(c->proplist, c);
+    pa_device_init_icon(c->proplist, true);
+    pa_device_init_intended_roles(c->proplist);
 
-            if (!c->active_profile || profile->priority > c->active_profile->priority)
-                c->active_profile = profile;
-        }
-        /* If all profiles are not available, then we still need to pick one */
-        if (!c->active_profile) {
-            PA_HASHMAP_FOREACH(profile, c->profiles, state)
-                if (!c->active_profile || profile->priority > c->active_profile->priority)
-                    c->active_profile = profile;
+    return c;
+}
+
+void pa_card_choose_initial_profile(pa_card *card) {
+    pa_card_profile *profile;
+    void *state;
+    pa_card_profile *best = NULL;
+
+    pa_assert(card);
+
+    /* By default, pick the highest priority that is not unavailable,
+     * or if all profiles are unavailable, pick the profile with the
+     * highest priority regardless of its availability.
+     */
+
+    PA_HASHMAP_FOREACH(profile, card->profiles, state) {
+        if (profile->available == PA_AVAILABLE_NO)
+            continue;
+
+        if (!best || profile->priority > best->priority)
+            best = profile;
+    }
+
+    if (!best) {
+        PA_HASHMAP_FOREACH(profile, card->profiles, state) {
+            if (!best || profile->priority > best->priority)
+                best = profile;
         }
-        pa_assert(c->active_profile);
     }
+    pa_assert(best);
 
-    pa_device_init_description(c->proplist, c);
-    pa_device_init_icon(c->proplist, true);
-    pa_device_init_intended_roles(c->proplist);
+    card->active_profile = best;
+    card->save_profile = false;
 
-    pa_assert_se(pa_idxset_put(core->cards, c, &c->index) >= 0);
+    /* Let policy modules override the default. */
+    pa_hook_fire(&card->core->hooks[PA_CORE_HOOK_CARD_CHOOSE_INITIAL_PROFILE],
+                card);
+}
 
-    pa_log_info("Created %u \"%s\"", c->index, c->name);
-    pa_subscription_post(core, PA_SUBSCRIPTION_EVENT_CARD|PA_SUBSCRIPTION_EVENT_NEW, c->index);
+void pa_card_put(pa_card *card) {
+    pa_assert(card);
 
-    pa_hook_fire(&core->hooks[PA_CORE_HOOK_CARD_PUT], c);
-    return c;
+    pa_assert_se(pa_idxset_put(card->core->cards, card, &card->index) >= 0);
+    card->linked = true;
+
+    pa_log_info("Created %u \"%s\"", card->index, card->name);
+    pa_hook_fire(&card->core->hooks[PA_CORE_HOOK_CARD_PUT], card);
+    pa_subscription_post(card->core,
+            PA_SUBSCRIPTION_EVENT_CARD|PA_SUBSCRIPTION_EVENT_NEW, card->index);
 }
 
 void pa_card_free(pa_card *c) {
@@ -223,16 +244,16 @@ void pa_card_free(pa_card *c) {
 
     core = c->core;
 
-    pa_hook_fire(&core->hooks[PA_CORE_HOOK_CARD_UNLINK], c);
+    if (c->linked) {
+        pa_hook_fire(&core->hooks[PA_CORE_HOOK_CARD_UNLINK], c);
+        pa_idxset_remove_by_data(c->core->cards, c, NULL);
+        pa_log_info("Freed %u \"%s\"", c->index, c->name);
+        pa_subscription_post(c->core,
+            PA_SUBSCRIPTION_EVENT_CARD|PA_SUBSCRIPTION_EVENT_REMOVE, c->index);
+    }
 
     pa_namereg_unregister(core, c->name);
 
-    pa_idxset_remove_by_data(c->core->cards, c, NULL);
-
-    pa_log_info("Freed %u \"%s\"", c->index, c->name);
-
-    pa_subscription_post(c->core, PA_SUBSCRIPTION_EVENT_CARD|PA_SUBSCRIPTION_EVENT_REMOVE, c->index);
-
     pa_assert(pa_idxset_isempty(c->sinks));
     pa_idxset_free(c->sinks, NULL);
     pa_assert(pa_idxset_isempty(c->sources));
@@ -305,20 +326,27 @@ int pa_card_set_profile(pa_card *c, pa_c
 
     pa_hook_fire(&c->core->hooks[PA_CORE_HOOK_CARD_PROFILE_CHANGING], profile);
 
-    if ((r = c->set_profile(c, profile)) < 0)
+    /* If we're setting the initial profile, we shouldn't call set_profile(),
+     * because the implementation don't expect that (for historical reasons).
+     * We should just set c->active_profile, and the implementation will
+     * properly set up that profile after pa_card_put() has returned. It would
+     * be probably good to change this so that also the initial profile can be
+     * set up in set_profile(), but if set_profile() fails, that would need
+     * some better handling than what we do here currently. */
+    if (c->linked && (r = c->set_profile(c, profile)) < 0)
         return r;
 
-    pa_subscription_post(c->core, PA_SUBSCRIPTION_EVENT_CARD|PA_SUBSCRIPTION_EVENT_CHANGE, c->index);
-
-    pa_log_info("Changed profile of card %u \"%s\" to %s", c->index, c->name, profile->name);
-
     c->active_profile = profile;
     c->save_profile = save;
 
     if (save)
         update_port_preferred_profile(c);
 
-    pa_hook_fire(&c->core->hooks[PA_CORE_HOOK_CARD_PROFILE_CHANGED], c);
+    if (c->linked) {
+        pa_log_info("Changed profile of card %u \"%s\" to %s", c->index, c->name, profile->name);
+        pa_hook_fire(&c->core->hooks[PA_CORE_HOOK_CARD_PROFILE_CHANGED], c);
+        pa_subscription_post(c->core, PA_SUBSCRIPTION_EVENT_CARD|PA_SUBSCRIPTION_EVENT_CHANGE, c->index);
+    }
 
     return 0;
 }
Index: pulseaudio.git/src/modules/module-card-restore.c
===================================================================
--- pulseaudio.git.orig/src/modules/module-card-restore.c
+++ pulseaudio.git/src/modules/module-card-restore.c
@@ -526,16 +526,6 @@ static pa_hook_result_t card_new_hook_ca
     if (!(e = entry_read(u, new_data->name)))
         return PA_HOOK_OK;
 
-    if (e->profile[0]) {
-        if (!new_data->active_profile) {
-            pa_card_new_data_set_profile(new_data, e->profile);
-            pa_log_info("Restored profile '%s' for card %s.", new_data->active_profile, new_data->name);
-            new_data->save_profile = true;
-
-        } else
-            pa_log_debug("Not restoring profile for card %s, because already set.", new_data->name);
-    }
-
     /* Always restore the latency offsets because their
      * initial value is always 0 */
 
@@ -552,6 +542,31 @@ static pa_hook_result_t card_new_hook_ca
     return PA_HOOK_OK;
 }
 
+static pa_hook_result_t card_choose_initial_profile_callback(pa_core *core, pa_card *card, struct userdata *u) {
+    struct entry *e;
+
+    if (!(e = entry_read(u, card->name)))
+        return PA_HOOK_OK;
+
+    if (e->profile[0]) {
+        pa_card_profile *profile;
+
+        profile = pa_hashmap_get(card->profiles, e->profile);
+        if (profile) {
+            pa_log_info("Restoring profile '%s' for card %s.", card->active_profile->name, card->name);
+            pa_card_set_profile(card, profile, true);
+        } else {
+            pa_log_debug("Tried to restore profile %s for card %s, but the card doesn't have such profile.",
+                         e->profile, card->name);
+        }
+    }
+
+    entry_free(e);
+
+
+    return PA_HOOK_OK;
+}
+
 int pa__init(pa_module*m) {
     pa_modargs *ma = NULL;
     struct userdata *u;
@@ -569,6 +584,8 @@ int pa__init(pa_module*m) {
     u->module = m;
 
     pa_module_hook_connect(m, &m->core->hooks[PA_CORE_HOOK_CARD_NEW], PA_HOOK_EARLY, (pa_hook_cb_t) card_new_hook_callback, u);
+    pa_module_hook_connect(m, &m->core->hooks[PA_CORE_HOOK_CARD_CHOOSE_INITIAL_PROFILE], PA_HOOK_NORMAL,
+                           (pa_hook_cb_t) card_choose_initial_profile_callback, u);
     pa_module_hook_connect(m, &m->core->hooks[PA_CORE_HOOK_CARD_PUT], PA_HOOK_NORMAL, (pa_hook_cb_t) card_put_hook_callback, u);
     pa_module_hook_connect(m, &m->core->hooks[PA_CORE_HOOK_CARD_PROFILE_CHANGED], PA_HOOK_NORMAL, (pa_hook_cb_t) card_profile_changed_callback, u);
     pa_module_hook_connect(m, &m->core->hooks[PA_CORE_HOOK_CARD_PROFILE_ADDED], PA_HOOK_NORMAL, (pa_hook_cb_t) card_profile_added_callback, u);
Index: pulseaudio.git/src/modules/alsa/module-alsa-card.c
===================================================================
--- pulseaudio.git.orig/src/modules/alsa/module-alsa-card.c
+++ pulseaudio.git/src/modules/alsa/module-alsa-card.c
@@ -642,7 +642,7 @@ int pa__init(pa_module *m) {
     struct userdata *u;
     pa_reserve_wrapper *reserve = NULL;
     const char *description;
-    const char *profile = NULL;
+    const char *profile_str = NULL;
     char *fn = NULL;
     bool namereg_fail = false;
 
@@ -770,9 +770,6 @@ int pa__init(pa_module *m) {
         goto fail;
     }
 
-    if ((profile = pa_modargs_get_value(u->modargs, "profile", NULL)))
-        pa_card_new_data_set_profile(&data, profile);
-
     u->card = pa_card_new(m->core, &data);
     pa_card_new_data_done(&data);
 
@@ -783,6 +780,26 @@ int pa__init(pa_module *m) {
     u->card->set_profile = card_set_profile;
 
     init_jacks(u);
+
+    pa_card_choose_initial_profile(u->card);
+
+    /* If the "profile" modarg is given, we have to override whatever the usual
+     * policy chose in pa_card_choose_initial_profile(). */
+    profile_str = pa_modargs_get_value(u->modargs, "profile", NULL);
+    if (profile_str) {
+        pa_card_profile *profile;
+
+        profile = pa_hashmap_get(u->card->profiles, profile_str);
+        if (!profile) {
+            pa_log("No such profile: %s", profile_str);
+            goto fail;
+        }
+
+        pa_card_set_profile(u->card, profile, false);
+    }
+
+    pa_card_put(u->card);
+
     init_profile(u);
     init_eld_ctls(u);
 
